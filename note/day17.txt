Day17

1. Generic
    - 데이터의 타입을 일반화한다(Generalize)
    - 클래스와 메서드에서 사용할 타입을 설계도에 저장하지 않고
      컴파일할 때 지정하는 기술
      -> 사용자가 사용할 때 타입을 결정
    - JDK 1.5 때 도입, 그 전에는 Object를 사용
    - Object를 사용하면
      데이터 입력 시 모든 데이터 입력이 가능하므로
      잘못된 데이터가 들어갈 수 있으며
      데이터 사용 시에도 데이터 타입을 모르니
      알게 되더라도 Casting을 반드시 해야 사용 가능

    Animal<T> : T, K, V, E

=> Generic1.java, Generic2.java

2. Lambda(람다)
(1) 1930년대, 알론조 처치라는 수학자가 제시한
    함수의 수학적 표기법
    => Lambda Calculus(람다 대수)에 기초
    Java 8(2014)부터 지원
    객체 지향 프로그래밍에 
    함수형 프로그래밍의 특징이 추가

(2) 함수형 프로그래밍
    일반적으로 메서드끼리 **데이터**를 주고 받는다.
    함수형 프로그래밍은 데이터는 이미 존재, 
    함수를 넘겨주는 방식

    Java의 함수(메서드)는 기본적으로 
    어떤 클래스의 소속이어야 함
    => 나보고 정의하라는 것도 짜증나는데
       클래스도 만들어야 되냐??
    => 심지어 일회성이냐?
    => 미안해 그럼 익명 객체로 하게 해줄께

(3) 익명 객체(Anonymous Object)
    첫 번째, 데이터 개수는 고정이니 선언은 할 수 있네
            => 인터페이스
    두 번째, 객체를 생성할 때(클래스를 안 만들고)
            메서드를 구현
            => 사용자가 메서드를 만들어야 하는데,
               메서드 정의가 너무 긴거 아님?
            => 줄여야겠다 => 람다식
(4) 정리
    무슨 타입인지를 사용자에게 맡김
    => Generic
    무슨 함수를 사용할지를 사용자에게 맡김
    => 함수형 프로그래밍
    함수를 (    )에 다 넣으려니 길고 복잡
    => 람다식

(5) 기본 형식
    Method(매개변수들.....){
        실행문;
    }

    (매개변수들.....) -> { 실행문; }

=> Calculable.java CalculableClass.java
   CalculableReturn.java LambdaMain.java    

