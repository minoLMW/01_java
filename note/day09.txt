Day9

1. 요약
    Java로 개발한다는 것 > 클래스를 만드는 것
    클래스는 객체로 구현되어야 완성된다.

    Java는 웹 개발에 사용하는 것이 기본
    누가 먼저라는 개념은 없음

    Java로 만들어진 객체는 웹 서버(ex 톰캣)
    가 관리하는 컨테이너라는 곳에 만들어진다.
    사용자가 요청할 때마다 객체를 잠시 빌리는 구조
    (Singleton)

    Java로 만드는 배치 프로그램?
    public static void main(String[])
    를 통해 직접 실행

    클래스 내의 변수
    - 클래스 변수(static)
    - 인스턴스 변수 : 각 객체마다 다를 수 있는 변수
    - 로컬 변수

2. 메서드(Method)
    - 클래스가 가지고 있는 함수
    - 본명 : member function

    public static void main(String[] args)
    접근제한자
          [static]
                  리턴타입
                       메서드명
                           (매개변수들)

    1) 접근제한자
        이 메서드를 누가 실행할 수 있는가?(권한)
        제일 넓은 권한은 public(누구나)

    2) static
        객체 생성을 하지 않아도 사용할 수 있다.
        왜 객체 생성을 안해도 되는가?
            => 객체마다 다를 게 없거든
            => 그래서 공통 영역에 만들어 지거든

    3) 리턴타입
        메서드는 값을 받기만 하는가? No
        일을 다 하고 결과를 전송해야할 때
        ex) int add(int a, int b)
            a와 b를 더해서 돌려주는 함수
        void : 돌려주는 거 없다
        int, float, double, String
        String[], int[], Person, Person[]

    4) 메서드명
        변수명 만드는 규칙과 동일, 일반적으로 동사+목적어(명사)
        printScreen, getMember, getAllVariables

    5) 매개변수
        메서드의 입력값(parameter, value, argument)
        입력값의 개수가 정해져 있을 때(String a)
        입력값의 개수가 정해져 있지 않을 때(String[] args)

3. 메서드 오버로딩(Overloading)
    같은 이름의 메서드로 다양한 입력값을 처리
    printVar(int a)
    printVar(String a)
    printVar(double[] a)
        - Java는 이런 식으로 같은 이름의 여러 메서드를
          만들 수 있습니다 => 사용자의 편의성을 위함

    cf) C언어
        printVar1(int a)
        printVar2(String a)
        printVar3(double[] a)
            - 사용자가 변수에 따라 다른 함수명을
              모두 알고 있어야 사용 가능

    - 메서드 오버라이딩(Overriding)과 비교됨

4. this와 초기화 블럭
(1) this
    - 객체 본인을 일컫는 말
    - 예) 표에 커서를 올릴 때마다 그 줄은 빨간색
          event(this){
              this.backgroundcolor = RED;
          }
(2) 초기화 블럭
    2가지의 타입이 있음
    static {       }
    {              }

=> ClassTest.java

5. 권한
(1) 패키지
    클래스를 디렉토리별로 관리하기 위한 목적(기능별)
    * 라이브러리 : 여러 개의 패키지    

(2) 접근제어
    public : 누구든지(O)
    protected : 누구든지(X), 상속받은(O), 같은 디렉토리(O), 클래스내(O)
    (default) : 누구든지(X), 상속받은(X), 같은 디렉토리(O), 클래스내(O)
    private : 누구든지(X), 상속받은(X), 같은 디렉토리(X), 클래스내(O)

(3) final
    변수에 final을 붙이면 수정 불가
    메서드에 final을 붙이면 상속 후 수정 불가
    클래스에 final을 붙이면 상속 불가

=> AuthEx.java 실습

* 내일 수업 예고
=> Deparment.java 실습
=> 상속(Inheritance) : 클래스의 대표적인 특징





