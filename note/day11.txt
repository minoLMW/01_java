Day11

0. Department.java 완성

1. 상속(Inheritance)
(1) 객체지향언어의 가장 큰 특징 > 재사용성 > 상속
    상속은 부모 클래스로부터 변수와 메서드를 물려받는 것
    클래스를 만들 때 처음부터 만드는 것이 아니라
    일단 부모로부터 받고 추가적인 것이나 변경해야할 부분만 수정

(2) 상속의 특징
    1) 용어
        부모, 슈퍼, 상위, 베이스 : 상속을 주는 클래스
        자식, 서브, 하위, 파생(Derived) : 상속을 받은 클래스
    2) 클래스 상속 방법
        extends 키워드 사용
        class Child extends Parent {

        }
    3) 상속의 특징
        - 단일 상속만 가능
        - 부모 객체가 먼저 생성되고 자식 객체가 생성
        - 모든 클래스의 조상 : Object
    4) super
        - 자식 클래스에서 부모 클래스를 부르는 이름
        - super.필드, super.메서드()

(3) 메서드 재정의(Overriding=Overwriting)
    부모 : print(String str)
    자식 : print(String aaa)
    => 같은 메서드이다.
    1) 부모 클래스의 메서드를 자식 클래스가 변경하는 것
    2) 메서드명 뿐 아니라 메서드의 변수 타입이 동일
       메서드명이 같은데 메서드의 변수 타입이 다르면?
       => 메서드 오버로딩(Overloading)
    3) 동일한 이름, 타입의 메서드는 자식 메서드가 우선
    4) 부모의 권한과 같거나 낮은 권한
        부모가 public이면 자식은 무조건 public

(4) 다형성(Polymorphism)
    1) 
        int i = 0;
        double d = i;  // 문제없이 동작

        double b = 10.34;
        int j = b;  // 오류, 넓은데서 좁은데로 못가
        int j = (int)b;  // 명시적 형변환
    2) 클래스의 형변환
        Parent p = new Child();  (O)
        Child c = new Parent();  (X)
        Child c = (Child)p;      (O)

        Parent p = new Parent();
        Child c = (Child)p;      (X)

        Food라는 클래스가 있다.
        이 클래스를 100년 후에 상속한
        FrenchFood,
        KoreanFood,
        AmericanFood가 있다고 가정

        Food 클래스 활동 당시에
        eatFood라는 메서드가 있어서
        eatFood(Food f){
            f를 먹어버린다;
        }

        FrenchFood fran;
        KoreanFood kor;
        eatFood(fran);
        eatFood(kor);

        상속받은 클래스가 늘어나더라도
        메서드 변경이 필요없음

=> ClassP.java, ClassC.java
=> ClassMain.java

2. Super Test
=> Parent.java, Child.java, SuperTest.java
=> super는 부모 메서드의 내용을 가져오기 위해
   사용할 때 매우 효과적이다.
    