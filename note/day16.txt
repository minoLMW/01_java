Day16

1. Collection Framework
(1) 개요
    코딩 중 객체(기본형 포함)을 여러 개를
    저장하고 꺼내쓰는 경우가 빈번
    => 가장 간단하게 구현한 것이 배열 []

    배열 선언 방법
        데이터타입[] 배열명 = new 데이터타입[개수];
        int[] scores = new int[5];

    배열은 전체 개수를 알고 있을 때는 사용이 편리
    모르고 있거나, 변경될 때
    - 매번 생성 시 1000개씩 만들자 => 공간 낭비
    - 배열에서 데이터를 지우면 그 공간은 빈 자리
    => 배열의 알려진 문제점 + 잘 알려진 구조
       데이터의 추가/삭제/검색이 편리하도록
       java.util 패키지 내에 여러 개의 IF와 클래스를 추가
    => 이를 컬렉션 프레임워크라 부른다.

(2) List
    - 객체를 일렬로 늘어놓은 구조
    - 객체를 인덱스로 관리
    - 객체를 저장하면 인덱스를 자동으로 부여
    - 인덱스로 객체 검색, 삭제, 변경 가능

    * 대표적인 리스트
    ArrayList, Vector, LinkedList

=> ListCollection.java    

(3) Set
    - 집합, 복주머니 속의 구슬
    - 중복을 허락하지 않음
    - 저장 순서를 보장하지 않음
    - 대표적인 클래스는 HashSet, TreeSet
    - 데이터 검색 속도가 매우 빠름
=> SetCollection.java

(4) Map
    - Key, Value로 구성된 Entry
    - {name}: {James}, {age}: 25
    - REST API 통신에서 사용하는 데이터 형태와 동일
    - Key는 중복저장 안됨, Value는 가능
    - 대표적인 클래스로 HashMap, TreeMap
=> MapCollection.java